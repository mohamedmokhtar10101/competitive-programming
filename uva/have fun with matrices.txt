#include<iostream>
#include<set>
#include<cmath>
#include<string>
#include<vector>
#include<algorithm>
#include<fstream>
#include<list>
#include<stack>
#include<queue>
#include<map>
using namespace std;
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v) ((int)v.size())
#define rep(i,n) for(int i = 0; i < (int)(n); ++i)
#define reprng(i,a,b) for(int i = a; i <= (int)(b); ++i)
#define reprrng(i,n,a) for(int i = n;i >= (int)(a); --i)
#define For(it,c) for(auto  it=c.begin();it!=c.end();++it)
#define log2(n) (log10((long double)n) / log10((long double)2))
#define swap(a,b) a = a + b, b = a - b, a = a - b
#define mp make_pair
typedef long long ll;


int main()
{

	int t;
	cin >> t;
	rep(T,t)
	{
		int n;
		cin >> n;

		vector< string > matrix(n);
		rep(i, n)
			cin >> matrix[i];

		
		int m;
		cin >> m;
		vector<int> rows(n);
		vector<int> cols(n);
		bool row = true;

		rep(i, n)
		{
			rows[i] = i;
			cols[i] = i;
		}
		int incs = 0;
		int decs = 0;
		rep(i, m)
		{
			string op;
			cin >> op;
			if (op == string("inc"))
				incs++;
			else if (op == string("dec"))
				decs++;

			else if (op == string("row"))
			{
				int a, b;
				cin >> a >> b;
				a--, b--;
				if (row)
					swap(rows[a], rows[b]);

				else
					swap(cols[a], cols[b]);


			}
			else if (op == string("col"))
			{
				int a, b;
				cin >> a >> b;
				a--, b--;
				if (row)
					swap(cols[a], cols[b]);
				else
					swap(rows[a], rows[b]);

			}
			else if (op == string("transpose"))
				row = !row;

		}
		int add = incs - decs;
		cout << "Case #" << T + 1 << endl;
		rep(i, n)
		{
			rep(j, n)
			{
				int num;
				if (row)
					num = matrix[rows[i]][cols[j]] - '0';
				else
				    num = matrix[rows[j]][cols[i]] - '0';


				if (add > 0)
					cout << (num + add) % 10;
				else if (add < 0)
				{
					if (num + add < 0)
					{
						int calc = (-1) * (num + add);
						cout << 10 - calc % 9;
					}
					else
						cout << num + add;
				}
				else
					cout << num;
			}
			cout << endl;
					
		}
			cout<<endl;

		
	}

	return 0;
}
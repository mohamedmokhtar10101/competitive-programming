#include<iostream>
#include<set>
#include<cmath>
#include<string>
#include<vector>
#include<algorithm>
#include<fstream>
#include<list>
#include<stack>
#include<queue>
#include<map>
using namespace std;
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v) ((int)v.size())
#define rep(i,n) for(int i = 0; i < (int)(n); ++i)
#define reprng(i,a,b) for(int i = a; i <= (int)(b); ++i)
#define reprrng(i,n,a) for(int i = n;i >= (int)(a); --i)
#define For(it,c) for(auto  it=c.begin();it!=c.end();++it)
#define log2(n) (log10((long double)n) / log10((long double)2))
#define swap(a,b) a = a + b, b = a - b, a = a - b
#define mp make_pair
typedef long long ll;
bool check( vector<ll> &gas, ll t, ll  maxCarGas)
{
	ll carGas = maxCarGas;
	ll lastGas = 0;
	rep(i, sz(gas) )
	{
		ll currentKiloes = gas[i] - lastGas;
		lastGas = gas[i];
		if (currentKiloes > carGas)
			return false;

		ll fastMode = min(currentKiloes, carGas - currentKiloes);
		ll totalMins = fastMode + (currentKiloes - fastMode) * 2;
		t -= totalMins;
		if (t == 0 && i < sz(gas) - 1)
			return false;
		else if (t < 0)
			return false;
	}
	return true;
}
int main()
{


	ll n, k, s, t;
	cin >> n >> k >> s >> t;
	vector< pair<ll, ll> > cars(n);
	vector<ll> gas(k + 1);
	rep(i, n)
		cin >> cars[i].first >> cars[i].second;
	rep(i, k)
		cin >> gas[i];
	gas[k] = s;
	sort(all(cars));
	sort(all(gas));
	ll l, h, mid;
	l = 0;
	h = 1000000001 ;
	while (h > l)
	{
		mid = (l + h ) / 2;
		if (check(gas, t, mid))
		{
			h = mid;
		}
		else
			l = mid + 1;

	}
	bool flag = false;
		rep(i, n)
		{
			if (cars[i].second >= l)
			{
				flag = true;
				cout << cars[i].first << endl;
				break;
			}
		}
		if (!flag)
			cout << -1 << endl;

	return 0;
}
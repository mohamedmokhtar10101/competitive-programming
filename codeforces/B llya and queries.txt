#include<iostream>
#include<set>
#include<cmath>
#include<string>
#include<vector>
#include<algorithm>
#include<fstream>
#include<list>
#include<stack>
#include<queue>
#include<map>
using namespace std;
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v) ((int)v.size())
#define rep(i,n) for(int i = 0; i < (int)(n); ++i)
#define reprng(i,a,b) for(int i = a; i <= (int)(b); ++i)
#define reprngr(i,n,a) for(int i = n;i >= (int)(a); --i)
#define For(it,c) for(auto  it=c.begin();it!=c.end();++it)
#define log2(n) (log10((long double)n) / log10((long double)2))
#define mp make_pair
typedef long long ll;


int main()
{


	string s;
	cin >> s;
	vector<bool> binary(sz(s)); // #..### => 0 1 0 1 1 0
	vector<ll> sumA(sz(s));     //           0 1 1 2 3 3  

	rep(i, sz(s) - 1)
		if (s[i] == s[i + 1])
			binary[i] = true;
	ll sum = 0;
	rep(i, sz(s))
	{
		sumA[i] = sum + (ll)binary[i]; // generally  sum[r] - sum[l - 1] gives the answer but r position in the binary not included because if it is true so it must be equal to r + 1 in the binary so it 's counted in the range so we must exclude it 
		sum += (int)binary[i];         // continued : ex: apllied to the above samples 2 5 => sum[5] - sum[1] =   3 - 0 = 3, since binary[5 /* r */ ] == 1 so it 's counted in the sum (hince : si = si + 1, si + 1 is byond r actual its r + 1) so remove it  
	}
	int m;
	cin >> m;
	rep(i, m)
	{
		int l, r;
		cin >> l >> r;
		
		l--;
		r--;
		sum = sumA[r];
		if (l != 0)
			sum -= sumA[l - 1];
		if (binary[r] == true)
			sum--;
		cout << sum << endl;

	}

	return 0;
}
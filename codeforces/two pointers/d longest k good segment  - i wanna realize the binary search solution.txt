#include<iostream>
#include<set>
#include<cmath>
#include<string>
#include<vector>
#include<algorithm>
#include<fstream>
#include<list>
#include<stack>
#include<queue>
#include<map>
using namespace std;
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v) ((int)v.size())
#define rep(i,n) for(int i = 0; i < (int)(n); ++i)
#define reprng(i,a,b) for(int i = a; i <= (int)(b); ++i)
#define reprrng(i,n,a) for(int i = n;i >= (int)(a); --i)
#define For(it,c) for(auto  it=c.begin();it!=c.end();++it)
#define log2(n) (log10((long double)n) / log10((long double)2))
#define swap(a,b) a = a + b, b = a - b, a = a - b
#define mp make_pair
typedef long long ll;

int main()
{
	int n, k;
	scanf("%d%d", &n, &k);
	vector<int>nums(n);
	rep(i, n)
		scanf("%d", &nums[i]);
	int l, r;
	l = 0;
	r = 0;

	int maxi = 0, L = 0, R = 0;
	set<int> s;
	vector<int> fr(1000001);
	while (l < n)
	{

		while (r < n && sz(s) <= k)
		{
			s.insert(nums[r]);
			fr[nums[r]]++;
			//if(sz(s) <= k)
			r++;
		}

		int last;
		if (sz(s) <= k && r == n)
			last = r - 1;
		else
			last = r - 2;
		if (last - l + 1 > maxi)
		{
			maxi = last - l + 1;
			L = l;
			R = last ;

		}
		if (fr[nums[l]] == 1)
			s.erase(nums[l]);

		fr[nums[l]]--;
		l++;

	}

	printf("%d %d\n", L + 1, R + 1);

	return 0;
}